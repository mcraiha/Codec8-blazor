@page "/"

<PageTitle>Codec8 with Blazor</PageTitle>
<label for="userinput">Please write or paste the Codec8 or Codec8 Extended to text area below</label>
<textarea @bind="Codec8Hex" @bind:event="oninput" id="userinput" name="userinput" />

@if (!string.IsNullOrEmpty(possibleError))
{
    <p>Following error occurred:</p>
    <code>@possibleError</code>
}
else
{
    <p>Mandatory parts</p>
    @if (frame != null)
    {
        <Codec8Mandatory Frame="@frame" />
        {
            int recordNumber = 1;
            @foreach (AvlDataCodec8 avlData in frame.GetAvlDatas())
            {
                GPSElement gps = avlData.GetGPSElement();
                IOElementCodec8 ioElement = avlData.GetIOElement();
                
                <Codec8Avl AVLData="@avlData" GPS="@gps" IOElement="@ioElement" RecordNumber="@recordNumber" />
                recordNumber++;
            }
        }
    }
    else if (frameExtended != null)
    {
        <Codec8ExtendedMandatory Frame="@frameExtended" />
        {
            int recordNumber = 1;
            @foreach (AvlDataCodec8Extended avlData in frameExtended.GetAvlDatas())
            {
                GPSElement gps = avlData.GetGPSElement();
                IOElementCodec8Extended ioElement = avlData.GetIOElement();
                
                <Codec8ExtendedAvl AVLData="@avlData" GPS="@gps" IOElement="@ioElement" RecordNumber="@recordNumber" />
                recordNumber++;
            }
        }
    }
}

@code {
    private string contentActual = "";
    public string Codec8Hex 
    {
        get => contentActual;
        set
        {
            somethingDecoded = true;
            contentActual = value;
            if (!string.IsNullOrEmpty(value))
            {
                (GenericDecodeResult result, object valueOrError) = GenericDecoder.ParseHexadecimalString(value);

                if (result == GenericDecodeResult.SuccessCodec8)
                {
                    frame = (Codec8Frame)valueOrError;
                    frameExtended = null;
                    possibleError = "";
                }
                else if (result == GenericDecodeResult.SuccessCodec8Extended)
                {
                    frame = null;
                    frameExtended = (Codec8ExtendedFrame)valueOrError;
                    possibleError = "";
                }
                else
                {
                    frame = null;
                    frameExtended = null;
                    possibleError = (string)valueOrError;
                }
            }
        } 
    }

    private bool somethingDecoded = false;
    private GenericDecodeResult result = GenericDecodeResult.InputNullOrEmpty;
    private Codec8Frame? frame = null;
    private Codec8ExtendedFrame? frameExtended = null;
    private string possibleError = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Input 
    { 
        get => ""; 
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                Codec8Hex = value;
            }
        }
    }
}